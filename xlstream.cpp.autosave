#include "xlstream.h"
#include "xlobj.h"
#include <vector>
#include <iostream>

XLStream::XLStream(){
}

void XLStream::addRenderObj(XLObj *obj){
    this->mRenderObjs.push_back(obj);
}

void  XLStream::setCamPos(real x, real y, real z){
    this->cam_x = x;
    this->cam_y = y;
    this->cam_z = z;
}

void  XLStream::setCamAngle(real x, real y, real z){
    this->cam_angle_x = x;
    this->cam_angle_y = y;
    this->cam_angle_z = z;
}

void XLStream::renderStream(){
    if(mRenderObjs.empty())
        return;

    for(auto beg = mRenderObjs.begin();beg!=mRenderObjs.end();++beg){
        XLObj *obj = *beg;

        model2WorldOr(obj);
        world2CamOr(obj);
        cam2PreOr(obj);
        per2ScrOr(obj);
    }//end for
}

//模型坐标->世界坐标
void XLStream::model2WorldOr(XLObj *obj){
    //cout<<"mode->world"<<endl;
    if(!obj)
        return;

    Point3D pos = obj->getPos();
    for(size_t i = 0;i<obj->mMVertex.size(); ++i){
        obj->mRVertex[i].x = obj->mMVertex[i].x  + pos.x;
        obj->mRVertex[i].y = obj->mMVertex[i].y  + pos.y;
        obj->mRVertex[i].z = obj->mMVertex[i].z  + pos.z;

        //Point3D debug = obj->mRVertex[i];
        //cout<<debug.x<<endl;
    }
}


//世界坐标->相机坐标
void XLStream::world2CamOr(XLObj *obj){
    //cout<<"world->camera"<<endl;
    if(!obj)
        return;

    
}

//相机坐标->透视坐标
void XLStream::cam2PreOr(XLObj *obj) {
     // cout<<"camera->perspective"<<endl;
    if(!obj)
        return;
}

//透视坐标->屏幕坐标
void XLStream::per2ScrOr(XLObj *obj) {
     //cout<<"perspective->screen"<<endl;
    if(!obj)
        return;
}


